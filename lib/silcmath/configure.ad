#
#  lib/silcmath/configure.ad
#
#  Author: Pekka Riikonen <priikone@silcnet.org>
#
#  Copyright (C) 2005 - 2008 Pekka Riikonen
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; version 2 of the License.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#

AC_MSG_NOTICE([configuring math library])

#ifdef SILC_DIST_TMA
if test x$want_cc_optimizations = xtrue; then
  SILC_ADD_CC_FLAGS(MATH, -O3, SILC_ADD_CC_FLAGS(MATH, -O2))
  SILC_ADD_CC_FLAGS(MATH, -funroll-all-loops)
fi
if test x$enable_stack_trace != xyes; then
  SILC_ADD_CC_FLAGS(MATH, -fomit-frame-pointer)
fi
#endif SILC_DIST_TMA

#ifdef SILC_DIST_TFM
# Put here any platform specific stuff
#
case "$target" in

  alpha*-*-*)
    if test ! "$GCC"; then
      SILC_ADD_CC_FLAGS(MATH, -DTFM_NO_ASM)
      if test x$want_cc_optimizations = xtrue; then
        SILC_ADD_CC_FLAGS(MATH, -O -Olimit 4000)
      fi
      SILC_ADD_CC_FLAGS(MATH, -std1 -DOSF1)
    fi
    ;;

  sparcv9-*-* | sparc64-*-*)
    if test x$want_cc_optimizations = xtrue; then
      SILC_ADD_CC_FLAGS(MATH, -O3, SILC_ADD_CC_FLAGS(MATH, -O2))
    fi
    if test ! "$GCC"; then
      SILC_ADD_CC_FLAGS(MATH, -DTFM_NO_ASM)
    fi
    ;;

  ultrasparc*-*-*)
    if test x$want_cc_optimizations = xtrue; then
      SILC_ADD_CC_FLAGS(MATH, -O3, SILC_ADD_CC_FLAGS(MATH, -O2))
    fi
    if test ! "$GCC"; then
      SILC_ADD_CC_FLAGS(MATH, -DTFM_NO_ASM)
    fi
    ;;

  hppa2.0w*-*-*)
    if test ! "$GCC"; then
      SILC_ADD_CC_FLAGS(MATH, -DTFM_NO_ASM)
      SILC_ADD_CC_FLAGS(MATH, -O)
      SILC_ADD_CC_FLAGS(MATH, -Ae)
      SILC_ADD_CC_FLAGS(MATH, +Z)
      SILC_ADD_CC_FLAGS(MATH, +e)
      SILC_ADD_CC_FLAGS(MATH, -z)
      SILC_ADD_CC_FLAGS(MATH, +DA2.0W)
      SILC_ADD_CC_FLAGS(MATH, +O3)
      SILC_ADD_CC_FLAGS(MATH, +DChpux)
      SILC_ADD_CC_FLAGS(MATH, -DHPUX10 -D_POSIX_C_SOURCE=199506L -DHPUX -Dhppa-D_HPUX_SOURCE -DHPUX11 -DXP_UNIX)
    fi
    ;;

  hppa2.0n*-*-*)
    if test ! "$GCC"; then
      SILC_ADD_CC_FLAGS(MATH, -DTFM_NO_ASM)
      SILC_ADD_CC_FLAGS(MATH, -O)
      SILC_ADD_CC_FLAGS(MATH, -Ae)
      SILC_ADD_CC_FLAGS(MATH, +Z)
      SILC_ADD_CC_FLAGS(MATH, +e)
      SILC_ADD_CC_FLAGS(MATH, -z)
      SILC_ADD_CC_FLAGS(MATH, +DA2.0)
      SILC_ADD_CC_FLAGS(MATH, +O3)
      SILC_ADD_CC_FLAGS(MATH, +DChpux)
      SILC_ADD_CC_FLAGS(MATH, -DHPUX10 -D_POSIX_C_SOURCE=199506L -DHPUX -Dhppa-D_HPUX_SOURCE -DHPUX11 -DXP_UNIX)
    fi
    ;;

  hppa*-*-*)
    if test ! "$GCC"; then
      SILC_ADD_CC_FLAGS(MATH, -DTFM_NO_ASM)
      SILC_ADD_CC_FLAGS(MATH, -O)
      SILC_ADD_CC_FLAGS(MATH, -Ae)
      SILC_ADD_CC_FLAGS(MATH, +Z)
      SILC_ADD_CC_FLAGS(MATH, +DAportable)
      SILC_ADD_CC_FLAGS(MATH, +DS1.1)
      SILC_ADD_CC_FLAGS(MATH, -DHPUX10 -D_POSIX_C_SOURCE=199506L -DHPUX -Dhppa-D_HPUX_SOURCE -DHPUX11 -DXP_UNIX)
      AS="$(CC) $(CFLAGS) $(MPI_CFLAGS) -c"
    fi
    ;;

  armv4*-*-*)
    SILC_ADD_CC_FLAGS(MATH, -DTFM_ARM)
    ;;

  *)
    if test x$want_cc_optimizations = xtrue; then
      SILC_ADD_CC_FLAGS(MATH, -O3, SILC_ADD_CC_FLAGS(MATH, -O2))
    fi
    if test x$enable_stack_trace != xyes; then
      SILC_ADD_CC_FLAGS(MATH, -fomit-frame-pointer)
    fi
    ;;
esac

if test "$GCC"; then
  SILC_ADD_CC_FLAGS(MATH, -funroll-all-loops)
fi
if test x$want_asm = xfalse; then
  SILC_ADD_CC_FLAGS(MATH, -DTFM_NO_ASM)
fi
#endif SILC_DIST_TFM

AC_SUBST(MATH_CFLAGS)
